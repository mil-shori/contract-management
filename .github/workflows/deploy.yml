name: 'Deploy to Firebase'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Âûã„ÉÅ„Çß„ÉÉ„ÇØ„Å®„É™„É≥„Éà
  lint-and-type-check:
    name: 'Lint & Type Check'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅÆÂûã„ÉÅ„Çß„ÉÉ„ÇØ„Å®„É™„É≥„Éà
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Frontend type check
        run: |
          cd frontend
          npm run type-check

      - name: Frontend lint
        run: |
          cd frontend
          npm run lint

      # „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆÂûã„ÉÅ„Çß„ÉÉ„ÇØ„Å®„É™„É≥„Éà
      - name: Install functions dependencies
        run: |
          cd functions
          npm ci

      - name: Functions type check & lint
        run: |
          cd functions
          npm run lint

  # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÉÜ„Çπ„Éà
  test-frontend:
    name: 'Test Frontend'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run tests
        run: |
          cd frontend
          npm run test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage

  # „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÉÜ„Çπ„Éà
  test-functions:
    name: 'Test Functions'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd functions
          npm ci

      - name: Run tests
        run: |
          cd functions
          npm run test

  # Python„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„Éà
  test-python-services:
    name: 'Test Python Services'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies (OCR)
        run: |
          cd functions-python
          pip install -r requirements.txt

      - name: Test OCR service
        run: |
          cd functions-python
          python test_ocr.py

      - name: Install Python dependencies (AI)
        run: |
          cd functions-ai
          pip install -r requirements.txt

      - name: Test AI service
        run: |
          cd functions-ai
          python test_ai.py

  # „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # „Éì„É´„Éâ
  build:
    name: 'Build Application'
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test-frontend, test-functions]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éì„É´„Éâ
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build/

      # Functions„Éì„É´„Éâ
      - name: Install functions dependencies
        run: |
          cd functions
          npm ci

      - name: Build functions
        run: |
          cd functions
          npm run build

      - name: Upload functions build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: functions-build
          path: functions/lib/

  # „Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞Áí∞Â¢É„Éá„Éó„É≠„Ç§
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/build/

      - name: Download functions artifacts
        uses: actions/download-artifact@v3
        with:
          name: functions-build
          path: functions/lib/

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate to Firebase
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}' > $HOME/gcloud-service-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json
          firebase login:ci --interactive

      - name: Set Firebase project (staging)
        run: firebase use ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}

      - name: Deploy to Firebase Staging
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json
          firebase deploy --force
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_STAGING }}

      - name: Run smoke tests
        run: |
          cd frontend
          npm run test:e2e:staging

      - name: Notify Slack (Success)
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: '‚úÖ Staging deployment successful!'

      - name: Notify Slack (Failure)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: '‚ùå Staging deployment failed!'

  # Êú¨Áï™Áí∞Â¢É„Éá„Éó„É≠„Ç§
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/build/

      - name: Download functions artifacts
        uses: actions/download-artifact@v3
        with:
          name: functions-build
          path: functions/lib/

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate to Firebase
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}' > $HOME/gcloud-service-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json

      - name: Set Firebase project (production)
        run: firebase use ${{ secrets.FIREBASE_PROJECT_ID_PRODUCTION }}

      - name: Deploy to Firebase Production
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json
          firebase deploy --force
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_PRODUCTION }}

      - name: Run smoke tests
        run: |
          cd frontend
          npm run test:e2e:production

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            ${{ github.event.head_commit.message }}
            
            ## Deployed Services
            - ‚úÖ Frontend (Firebase Hosting)
            - ‚úÖ Backend Functions (TypeScript)
            - ‚úÖ OCR Service (Python)
            - ‚úÖ AI Service (Python)
            - ‚úÖ Database Rules
            - ‚úÖ Storage Rules

      - name: Notify Slack (Success)
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: 'üöÄ Production deployment successful! Version: v${{ github.run_number }}'

      - name: Notify Slack (Failure)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: 'üö® Production deployment failed! Please check the logs.'

  # „É≠„Éº„É´„Éê„ÉÉ„ÇØÔºàÊâãÂãï„Éà„É™„Ç¨„ÉºÔºâ
  rollback:
    name: 'Rollback Production'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate to Firebase
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}' > $HOME/gcloud-service-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json

      - name: Rollback Firebase Hosting
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json
          firebase hosting:rollback --project ${{ secrets.FIREBASE_PROJECT_ID_PRODUCTION }}

      - name: Notify Slack (Rollback)
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: '‚ö†Ô∏è Production rollback completed!'