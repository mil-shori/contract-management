version: '3.8'

services:
  # Firebase エミュレーター
  firebase-emulator:
    build: .
    ports:
      - "5000:5000"   # Firebase Hosting
      - "5001:5001"   # Firebase Functions
      - "8080:8080"   # Firestore
      - "9099:9099"   # Firebase Auth
      - "9199:9199"   # Firebase Storage
      - "4000:4000"   # Firebase UI
    volumes:
      - ./firebase.json:/app/firebase.json:ro
      - ./firestore.rules:/app/firestore.rules:ro
      - ./storage.rules:/app/storage.rules:ro
      - ./functions:/app/functions:ro
      - ./frontend/build:/app/frontend/build:ro
    environment:
      - FIREBASE_PROJECT_ID=contract-management-dev
      - NODE_ENV=development
    networks:
      - contract-management

  # PostgreSQL (将来的な拡張用)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: contract_management
      POSTGRES_USER: contract_user
      POSTGRES_PASSWORD: contract_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - contract-management

  # Redis (キャッシュ用)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - contract-management

  # Nginx (リバースプロキシ)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - firebase-emulator
    networks:
      - contract-management

  # Elasticsearch (ログ集約・検索用)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - contract-management

  # Kibana (ログ可視化)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - contract-management

  # Prometheus (メトリクス収集)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - contract-management

  # Grafana (メトリクス可視化)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - contract-management

  # Jaeger (分散トレーシング)
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - contract-management

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  contract-management:
    driver: bridge